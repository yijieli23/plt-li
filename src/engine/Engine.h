// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <mutex>
#include <stdint.h>

namespace state {
  class State;
};
namespace engine {
  class CommandSet;
  class Command;
  class Ruler;
  class Record;
}

#include "state/State.h"
#include "EngineMode.h"
#include "Ruler.h"
#include "Record.h"
#include "CommandSet.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    engine::EngineMode mode;
    engine::Record record;
    // Attributes
  protected:
    state::ElementFactory factory;
    state::State currentState;
    mutable std::mutex commands_mutex;
    CommandSet* currentCommands;
    CommandSet* waitingCommands;
    int64_t lastUpdateTime;
    mutable std::mutex update_mutex;
    // Operations
  public:
    Engine ();
    ~Engine ();
    EngineMode getMode () const;
    const state::State& getState () const;
    void addCommand (Command* cmd);
    void takeCommands (CommandSet& commands);
    CommandSet* getCommandSet () const;
    std::mutex& getUpdateMutex () const;
    void update ();
  protected:
    void swapCommands ();
    void setMode (EngineMode em);
    void loadLevel (const char* file_name);
  };

};

#endif
